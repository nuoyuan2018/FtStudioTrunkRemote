package cn.ftoutiao.account.android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.ftoutiao.account.android.model.db.ListItemBO;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_bill".
*/
public class ListItemBODao extends AbstractDao<ListItemBO, Long> {

    public static final String TABLENAME = "tbl_bill";

    /**
     * Properties of entity ListItemBO.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ItemId = new Property(1, String.class, "itemId", false, "ITEM_ID");
        public final static Property AId = new Property(2, String.class, "aId", false, "A_ID");
        public final static Property AType = new Property(3, String.class, "aType", false, "A_TYPE");
        public final static Property CType = new Property(4, int.class, "cType", false, "C_TYPE");
        public final static Property CId = new Property(5, int.class, "cId", false, "C_ID");
        public final static Property CName = new Property(6, String.class, "cName", false, "C_NAME");
        public final static Property RId = new Property(7, int.class, "rId", false, "R_ID");
        public final static Property RName = new Property(8, String.class, "rName", false, "R_NAME");
        public final static Property ADate = new Property(9, String.class, "aDate", false, "A_DATE");
        public final static Property Ctime = new Property(10, int.class, "ctime", false, "CTIME");
        public final static Property Mtime = new Property(11, int.class, "mtime", false, "MTIME");
        public final static Property Amount = new Property(12, float.class, "amount", false, "AMOUNT");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property Icon = new Property(14, String.class, "icon", false, "ICON");
        public final static Property Color = new Property(15, String.class, "color", false, "COLOR");
        public final static Property Uid = new Property(16, String.class, "uid", false, "UID");
        public final static Property Nickname = new Property(17, String.class, "nickname", false, "NICKNAME");
        public final static Property Year = new Property(18, String.class, "year", false, "YEAR");
        public final static Property Month = new Property(19, String.class, "month", false, "MONTH");
        public final static Property Day = new Property(20, String.class, "day", false, "DAY");
    }


    public ListItemBODao(DaoConfig config) {
        super(config);
    }
    
    public ListItemBODao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_bill\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ITEM_ID\" TEXT UNIQUE ," + // 1: itemId
                "\"A_ID\" TEXT," + // 2: aId
                "\"A_TYPE\" TEXT," + // 3: aType
                "\"C_TYPE\" INTEGER NOT NULL ," + // 4: cType
                "\"C_ID\" INTEGER NOT NULL ," + // 5: cId
                "\"C_NAME\" TEXT," + // 6: cName
                "\"R_ID\" INTEGER NOT NULL ," + // 7: rId
                "\"R_NAME\" TEXT," + // 8: rName
                "\"A_DATE\" TEXT," + // 9: aDate
                "\"CTIME\" INTEGER NOT NULL ," + // 10: ctime
                "\"MTIME\" INTEGER NOT NULL ," + // 11: mtime
                "\"AMOUNT\" REAL NOT NULL ," + // 12: amount
                "\"REMARK\" TEXT," + // 13: remark
                "\"ICON\" TEXT," + // 14: icon
                "\"COLOR\" TEXT," + // 15: color
                "\"UID\" TEXT," + // 16: uid
                "\"NICKNAME\" TEXT," + // 17: nickname
                "\"YEAR\" TEXT," + // 18: year
                "\"MONTH\" TEXT," + // 19: month
                "\"DAY\" TEXT);"); // 20: day
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_bill\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ListItemBO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(2, itemId);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(3, aId);
        }
 
        String aType = entity.getAType();
        if (aType != null) {
            stmt.bindString(4, aType);
        }
        stmt.bindLong(5, entity.getCType());
        stmt.bindLong(6, entity.getCId());
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(7, cName);
        }
        stmt.bindLong(8, entity.getRId());
 
        String rName = entity.getRName();
        if (rName != null) {
            stmt.bindString(9, rName);
        }
 
        String aDate = entity.getADate();
        if (aDate != null) {
            stmt.bindString(10, aDate);
        }
        stmt.bindLong(11, entity.getCtime());
        stmt.bindLong(12, entity.getMtime());
        stmt.bindDouble(13, entity.getAmount());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(15, icon);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(16, color);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(17, uid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(18, nickname);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(19, year);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(20, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(21, day);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ListItemBO entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String itemId = entity.getItemId();
        if (itemId != null) {
            stmt.bindString(2, itemId);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(3, aId);
        }
 
        String aType = entity.getAType();
        if (aType != null) {
            stmt.bindString(4, aType);
        }
        stmt.bindLong(5, entity.getCType());
        stmt.bindLong(6, entity.getCId());
 
        String cName = entity.getCName();
        if (cName != null) {
            stmt.bindString(7, cName);
        }
        stmt.bindLong(8, entity.getRId());
 
        String rName = entity.getRName();
        if (rName != null) {
            stmt.bindString(9, rName);
        }
 
        String aDate = entity.getADate();
        if (aDate != null) {
            stmt.bindString(10, aDate);
        }
        stmt.bindLong(11, entity.getCtime());
        stmt.bindLong(12, entity.getMtime());
        stmt.bindDouble(13, entity.getAmount());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(15, icon);
        }
 
        String color = entity.getColor();
        if (color != null) {
            stmt.bindString(16, color);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(17, uid);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(18, nickname);
        }
 
        String year = entity.getYear();
        if (year != null) {
            stmt.bindString(19, year);
        }
 
        String month = entity.getMonth();
        if (month != null) {
            stmt.bindString(20, month);
        }
 
        String day = entity.getDay();
        if (day != null) {
            stmt.bindString(21, day);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ListItemBO readEntity(Cursor cursor, int offset) {
        ListItemBO entity = new ListItemBO( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // itemId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // aId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // aType
            cursor.getInt(offset + 4), // cType
            cursor.getInt(offset + 5), // cId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // cName
            cursor.getInt(offset + 7), // rId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // aDate
            cursor.getInt(offset + 10), // ctime
            cursor.getInt(offset + 11), // mtime
            cursor.getFloat(offset + 12), // amount
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // icon
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // color
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // uid
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // nickname
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // year
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // month
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // day
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ListItemBO entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setItemId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCType(cursor.getInt(offset + 4));
        entity.setCId(cursor.getInt(offset + 5));
        entity.setCName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRId(cursor.getInt(offset + 7));
        entity.setRName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setADate(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCtime(cursor.getInt(offset + 10));
        entity.setMtime(cursor.getInt(offset + 11));
        entity.setAmount(cursor.getFloat(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIcon(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setColor(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUid(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setNickname(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setYear(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setMonth(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setDay(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ListItemBO entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ListItemBO entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ListItemBO entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
