package cn.ftoutiao.account.android.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.ftoutiao.account.android.model.db.ATypeListEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_seq_category".
*/
public class ATypeListEntityDao extends AbstractDao<ATypeListEntity, Long> {

    public static final String TABLENAME = "tbl_seq_category";

    /**
     * Properties of entity ATypeListEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property AId = new Property(1, String.class, "aId", false, "A_ID");
        public final static Property Uid = new Property(2, String.class, "uid", false, "UID");
        public final static Property IncomeSeq1 = new Property(3, String.class, "incomeSeq1", false, "INCOME_SEQ1");
        public final static Property IncomeSeq2 = new Property(4, String.class, "incomeSeq2", false, "INCOME_SEQ2");
        public final static Property OutgoSeq1 = new Property(5, String.class, "outgoSeq1", false, "OUTGO_SEQ1");
        public final static Property OutgoSeq2 = new Property(6, String.class, "outgoSeq2", false, "OUTGO_SEQ2");
    }


    public ATypeListEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ATypeListEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_seq_category\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"A_ID\" TEXT UNIQUE ," + // 1: aId
                "\"UID\" TEXT," + // 2: uid
                "\"INCOME_SEQ1\" TEXT," + // 3: incomeSeq1
                "\"INCOME_SEQ2\" TEXT," + // 4: incomeSeq2
                "\"OUTGO_SEQ1\" TEXT," + // 5: outgoSeq1
                "\"OUTGO_SEQ2\" TEXT);"); // 6: outgoSeq2
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_seq_category\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ATypeListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(2, aId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String incomeSeq1 = entity.getIncomeSeq1();
        if (incomeSeq1 != null) {
            stmt.bindString(4, incomeSeq1);
        }
 
        String incomeSeq2 = entity.getIncomeSeq2();
        if (incomeSeq2 != null) {
            stmt.bindString(5, incomeSeq2);
        }
 
        String outgoSeq1 = entity.getOutgoSeq1();
        if (outgoSeq1 != null) {
            stmt.bindString(6, outgoSeq1);
        }
 
        String outgoSeq2 = entity.getOutgoSeq2();
        if (outgoSeq2 != null) {
            stmt.bindString(7, outgoSeq2);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ATypeListEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String aId = entity.getAId();
        if (aId != null) {
            stmt.bindString(2, aId);
        }
 
        String uid = entity.getUid();
        if (uid != null) {
            stmt.bindString(3, uid);
        }
 
        String incomeSeq1 = entity.getIncomeSeq1();
        if (incomeSeq1 != null) {
            stmt.bindString(4, incomeSeq1);
        }
 
        String incomeSeq2 = entity.getIncomeSeq2();
        if (incomeSeq2 != null) {
            stmt.bindString(5, incomeSeq2);
        }
 
        String outgoSeq1 = entity.getOutgoSeq1();
        if (outgoSeq1 != null) {
            stmt.bindString(6, outgoSeq1);
        }
 
        String outgoSeq2 = entity.getOutgoSeq2();
        if (outgoSeq2 != null) {
            stmt.bindString(7, outgoSeq2);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ATypeListEntity readEntity(Cursor cursor, int offset) {
        ATypeListEntity entity = new ATypeListEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // aId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // uid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // incomeSeq1
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // incomeSeq2
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // outgoSeq1
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // outgoSeq2
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ATypeListEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIncomeSeq1(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIncomeSeq2(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOutgoSeq1(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOutgoSeq2(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ATypeListEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ATypeListEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ATypeListEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
